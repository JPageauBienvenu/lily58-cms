/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#pragma once

#undef CONFIG_ZMK_MACRO_QWEAULT_WAIT_MS
#define CONFIG_ZMK_MACRO_QWEAULT_WAIT_MS 30

#undef CONFIG_ZMK_MACRO_QWEAULT_TAP_MS
#define CONFIG_ZMK_MACRO_QWEAULT_TAP_MS 40

/* Canadian Multilingual Standard Mappings */

#define SLSH   GRAVE         // /
#define SAPOS  LS(COMMA)     // /
#define DAPOS  LS(DOT)     // /
#define DEG    RA(SEMI)      // °
#define LBRAC  RA(N7)        // {
#define RBRAC  RA(N8)        // }
#define LBKET  RA(N9)        // [
#define RBKET  RA(N0)        // ]
#define QUEST  LS(N6)        // ?
#define PIP    RA(GRAVE)     // |
#define TILDS  RA(RBKT)      // ~
#define LETHAN RA(COMMA)     // ≤
#define GRTHAN RA(DOT)       // ≥
#define ACC_CI LBKT          // ^
#define ACC_GR RA(LBKT)      // `
#define ACC_TR LS(LBKT)      // ¨

// The following must return to the base layer after being pressed
ZMK_BEHAVIOR(A_GR,  macro_one_param, bindings = <&kp BACKSLASH>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)  // À
ZMK_BEHAVIOR(A_CI,  macro_one_param, bindings = <&fr_a_cf>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Â
ZMK_BEHAVIOR(E_CU,  macro_one_param, bindings = <&kp SLASH>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)      // É
ZMK_BEHAVIOR(E_GR,  macro_one_param, bindings = <&kp APOS>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // È
ZMK_BEHAVIOR(E_CI,  macro_one_param, bindings = <&fr_e_cf>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Ê
ZMK_BEHAVIOR(I_CI,  macro_one_param, bindings = <&fr_i_cf>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Î
ZMK_BEHAVIOR(O_CI,  macro_one_param, bindings = <&fr_o_cf>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Ô
ZMK_BEHAVIOR(U_CI,  macro_one_param, bindings = <&fr_u_cf>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Û
ZMK_BEHAVIOR(U_GR,  macro_one_param, bindings = <&fr_u_gr>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Ù
ZMK_BEHAVIOR(AE_L, macro_one_param, bindings = <&fr_ae>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)          // Æ
ZMK_BEHAVIOR(OE_L, macro_one_param, bindings = <&fr_oe>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)          // Œ
ZMK_BEHAVIOR(CEDIL, macro_one_param, bindings = <&kp RBKT>, <&macro_param_1to1>, <&to MACRO_PLACEHOLDER>;)       // Ç


// ` directly
ZMK_BEHAVIOR(GRA, macro, bindings =
    <&macro_press &kp RALT>,
    <&macro_tap &kp LBKT &kp LBKT>,
    <&macro_release &kp RALT>;
)

// ^ directly
ZMK_BEHAVIOR(CAR, macro, bindings =
    <&macro_tap &kp LBKT &kp SPACE>;
)

// ¨ directly
ZMK_BEHAVIOR(TREMA, macro_one_param, bindings =
    <&macro_tap &kp LS(LBKT) &kp SPACE>,
    <&macro_param_1to1>,
    <&to MACRO_PLACEHOLDER>;
)

// ` to input
ZMK_BEHAVIOR(AGRA, macro_two_param, bindings =
    <&kp RA(LBKT)>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&macro_param_2to1>,
    <&to MACRO_PLACEHOLDER>;
)

// ` to input then to default layer
ZMK_BEHAVIOR(AGRA_D, macro_one_param, bindings =
    <&kp RA(LBKT)>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&to QWE>;
)

// ´ to input
ZMK_BEHAVIOR(AIGU, macro_two_param, bindings =
    <&kp RA(SLASH)>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&macro_param_2to1>,
    <&to MACRO_PLACEHOLDER>;
)

// ¨ to input
ZMK_BEHAVIOR(TREM, macro_two_param, bindings =
    <&kp LS(LBKT)>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&macro_param_2to1>,
    <&to MACRO_PLACEHOLDER>;
)

// ^ to input
ZMK_BEHAVIOR(CIRC, macro_two_param, bindings = 
    <&kp LBKT>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&macro_param_2to1>,
    <&to MACRO_PLACEHOLDER>;
)

// ^ to input then to default layer
ZMK_BEHAVIOR(CIRC_D, macro_one_param, bindings = 
    <&kp LBKT>,
    <&macro_param_1to1>,
    <&macro_tap &kp MACRO_PLACEHOLDER>,
    <&to QWE>;
)

// Keypress then return to default layer
ZMK_BEHAVIOR(KPD, macro_two_param, bindings =
    <&macro_param_1to1>,
    <&kp MACRO_PLACEHOLDER>,
    <&macro_param_2to1>,
    <&to MACRO_PLACEHOLDER>;
)

/ {
    behaviors {
        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            bindings = <&shifted>, <&kp>;

            flavor = "tap-preferred";
        };
    };

    macros {
        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            display-name = "Base";
            bindings = <
&kp ESC           &as NUMBER_1  &as N2  &as N3     &as N4    &as N5                          &as N6  &as N7         &as N8           &as N9   &as N0     &kp BACKSPACE
&kp TAB           &as Q         &as W   &as E      &as R     &as T                           &as Y   &as U          &as I            &as O    &as P      &mo 3
&kp LEFT_SHIFT    &as A         &as S   &as D      &as F     &as G                           &as H   &as J          &as K            &as L    &as SEMI   &as SQT
&kp LEFT_CONTROL  &as Z         &as X   &as C      &as V     &as B   &as MINUS    &as EQUAL  &as N   &as M          &as COMMA        &as DOT  &as GRAVE  &as BACKSLASH
                                        &kp GRAVE  &kp LGUI  &mo 2   &kp SPACE    &kp RET    &mo 1   &kp RIGHT_ALT  &kp PRINTSCREEN
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Lower";
            bindings = <
&trans  &kp F1         &kp F2  &kp F3            &kp F4            &kp F5                    &kp F6  &kp F7             &kp F8  &kp F9  &kp F10  &kp F11
&trans  &trans         &trans  &as SLASH         &trans            &trans                    &trans  &trans             &trans  &trans  &trans   &kp F12
&trans  &as BACKSLASH  &trans  &as SINGLE_QUOTE  &as LEFT_BRACKET  &trans                    &trans  &as RIGHT_BRACKET  &trans  &trans  &trans   &trans
&trans  &trans         &trans  &trans            &trans            &trans  &trans    &trans  &trans  &trans             &trans  &trans  &trans   &as PIPE
                               &kp TILDE         &trans            &trans  &trans    &trans  &trans  &trans             &trans
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Raise";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans    &trans  &trans     &kp DEL
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans    &trans  &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans  &trans     &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans
            >;
        };

        layer_3 {
            display-name = "Lower";
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans                          &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans                          &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans
            >;
        };
    };
};
